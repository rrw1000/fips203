// Sampling

use crate::{
    dsa::{convert, dsa},
    format,
    types::{Bits, Bytes, IntRange2Or4},
};
use anyhow::Result;
use sha3::{
    Shake128, Shake256, Shake256Reader,
    digest::{ExtendableOutput, Update, XofReader},
};

pub fn sample_in_ball(p: &[u8], tau: u32) -> Result<[i32; 256]> {
    // H is SHAKE256.
    let mut c: [i32; 256] = [0; 256];
    let mut xof = Shake256::default();
    xof.update(p);
    let mut reader = xof.finalize_xof();
    let mut s: [u8; 8] = [0; 8];
    reader.read(&mut s);
    let h_val = format::bytes_to_bits(&s[..])?;
    let h = h_val.as_slice();
    for i in 256 - (tau as usize)..256 {
        let mut j: [u8; 1] = [0];
        reader.read(&mut j);
        while (j[0] as usize) > i {
            reader.read(&mut j);
        }
        c[i] = c[j[0] as usize];
        // -1^1 == -1 , -1 ^^ 2 = 1.
        c[j[0] as usize] = if h[i + (tau as usize) - 256] % 2 == 1 {
            -1
        } else {
            1
        };
    }
    Ok(c)
}

pub fn rej_ntt_poly(p: &[u8]) -> Result<[i32; 256]> {
    let mut a_hat: [i32; 256] = [0; 256];
    let mut j = 0;
    // G is SHAKE128
    let mut ctx = Shake128::default();
    ctx.update(p);
    let mut reader = ctx.finalize_xof();
    while j < 256 {
        let mut s: [u8; 3] = [0; 3];
        reader.read(&mut s);
        // It's difficult to say what's intended here when CoeffF
        if let Some(v) = convert::coeff_from_three_bytes(s[0], s[1], s[2]) {
            a_hat[j] = v as i32;
            j += 1;
        }
    }
    Ok(a_hat)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_rej_ntt_poly() {
        // Pure regression again
        let p =
            Bytes::from_hex("1e5448396ccfb504b459a6e4ba703de49ba44747ad3bed4228580d5becec32703e30")
                .unwrap();
        let sampled = rej_ntt_poly(p.as_bytes()).unwrap();
        let expected = [
            3418534, 1505795, 896770, 5643102, 1087491, 1470728, 338287, 4316045, 6778135, 3335538,
            321423, 275989, 6678742, 7855871, 1460980, 4676041, 1538892, 5182846, 6938972, 4696639,
            5852410, 2254199, 3931888, 8086891, 5046391, 942665, 3294635, 6074197, 2489007,
            1126151, 3148526, 109632, 6153489, 1951125, 6000052, 2686940, 5625741, 6201392,
            5951485, 7752406, 4768418, 1887157, 226542, 2077204, 3720710, 347630, 4637789, 1978252,
            7107740, 498357, 378565, 4592650, 5310283, 2542570, 5657038, 6620887, 4946280, 902643,
            7406579, 514552, 3800084, 6007464, 1195422, 7316878, 270372, 1827503, 252728, 398388,
            5309618, 2900599, 650941, 8019493, 3742853, 5306985, 4799982, 5704446, 7096850,
            8261619, 1315669, 643612, 5618262, 7593897, 2356785, 3306163, 424876, 1460382, 2299731,
            111038, 7464597, 1647196, 6237655, 2067285, 7904553, 4037536, 6162087, 1857815,
            7375631, 7815464, 1727806, 7895232, 2560150, 4132124, 6051031, 3695725, 8096962,
            3546256, 3054225, 3125014, 1200941, 7195149, 983944, 3305720, 2763702, 6024129,
            8237454, 8338241, 3330584, 3002985, 3567877, 5768348, 6507682, 7518727, 7483401,
            3656096, 3322763, 7313763, 148316, 724419, 1226567, 3321049, 2487496, 3862905, 4880816,
            2178800, 5574299, 1722589, 6618478, 3318328, 4559819, 4941409, 515993, 5425344,
            4675132, 3340210, 5147201, 6851283, 2333736, 1138019, 2363659, 2680345, 3069386,
            3191788, 4461414, 2006879, 1093546, 3373098, 3258055, 294084, 6708713, 4120381,
            7575168, 4276480, 2186154, 1413450, 5090352, 5938759, 4735990, 2353712, 772417,
            6006983, 3517307, 7264619, 1798879, 8326293, 1748773, 5525405, 4738689, 4863752,
            1243508, 2490534, 1471746, 6058904, 7369739, 3284484, 272426, 3284777, 7519154, 755282,
            4478808, 6718926, 4840133, 1173575, 8191068, 2439877, 973599, 5671743, 8253458,
            6544848, 1055583, 6029709, 7328584, 2342393, 3139282, 4351448, 7459784, 4154610,
            8092221, 1872737, 5770733, 1269698, 5703989, 570875, 6263834, 4453260, 3064621,
            5877033, 709359, 3917138, 2095793, 660472, 6975967, 3208769, 6736714, 6034411, 1223873,
            2087371, 3096289, 2309482, 8158795, 4710826, 2555951, 5564951, 7584329, 759957,
            6349619, 2735783, 10000, 3363417, 8091349, 3160074, 4670495, 4274329, 2129477, 1728738,
            108374, 8271244, 8267817, 5258070, 7087459, 2757701, 7585677, 5122529, 7499971,
            2285513, 6548792, 8256295,
        ];
        assert_eq!(expected, sampled);
    }

    #[test]
    fn test_sample_in_ball() {
        // Pure regression ..
        let p = Bytes::from_hex("1234567890").unwrap();
        let in_ball = sample_in_ball(p.as_bytes(), 20).unwrap();
        let expected = [
            0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, -1, 0, 1, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0,
        ];
        assert_eq!(expected, in_ball);
    }
}
